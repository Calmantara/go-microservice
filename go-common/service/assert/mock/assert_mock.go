// Code generated by MockGen. DO NOT EDIT.
// Source: assert.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAssert is a mock of Assert interface.
type MockAssert struct {
	ctrl     *gomock.Controller
	recorder *MockAssertMockRecorder
}

// MockAssertMockRecorder is the mock recorder for MockAssert.
type MockAssertMockRecorder struct {
	mock *MockAssert
}

// NewMockAssert creates a new mock instance.
func NewMockAssert(ctrl *gomock.Controller) *MockAssert {
	mock := &MockAssert{ctrl: ctrl}
	mock.recorder = &MockAssertMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssert) EXPECT() *MockAssertMockRecorder {
	return m.recorder
}

// IsEmpty mocks base method.
func (m *MockAssert) IsEmpty(value string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty", value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockAssertMockRecorder) IsEmpty(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockAssert)(nil).IsEmpty), value)
}

// IsUUIDEmpty mocks base method.
func (m *MockAssert) IsUUIDEmpty(value uuid.UUID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUUIDEmpty", value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUUIDEmpty indicates an expected call of IsUUIDEmpty.
func (mr *MockAssertMockRecorder) IsUUIDEmpty(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUUIDEmpty", reflect.TypeOf((*MockAssert)(nil).IsUUIDEmpty), value)
}

// IsZero mocks base method.
func (m *MockAssert) IsZero(value int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsZero", value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsZero indicates an expected call of IsZero.
func (mr *MockAssertMockRecorder) IsZero(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsZero", reflect.TypeOf((*MockAssert)(nil).IsZero), value)
}
