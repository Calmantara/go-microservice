// Code generated by MockGen. DO NOT EDIT.
// Source: util.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/Calmantara/go-common/model"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockUtilService is a mock of UtilService interface.
type MockUtilService struct {
	ctrl     *gomock.Controller
	recorder *MockUtilServiceMockRecorder
}

// MockUtilServiceMockRecorder is the mock recorder for MockUtilService.
type MockUtilServiceMockRecorder struct {
	mock *MockUtilService
}

// NewMockUtilService creates a new mock instance.
func NewMockUtilService(ctrl *gomock.Controller) *MockUtilService {
	mock := &MockUtilService{ctrl: ctrl}
	mock.recorder = &MockUtilServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtilService) EXPECT() *MockUtilServiceMockRecorder {
	return m.recorder
}

// ContextBackground mocks base method.
func (m *MockUtilService) ContextBackground(ctx context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContextBackground", ctx)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// ContextBackground indicates an expected call of ContextBackground.
func (mr *MockUtilServiceMockRecorder) ContextBackground(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContextBackground", reflect.TypeOf((*MockUtilService)(nil).ContextBackground), ctx)
}

// GetCorrelationIdFromContext mocks base method.
func (m *MockUtilService) GetCorrelationIdFromContext(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCorrelationIdFromContext", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCorrelationIdFromContext indicates an expected call of GetCorrelationIdFromContext.
func (mr *MockUtilServiceMockRecorder) GetCorrelationIdFromContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCorrelationIdFromContext", reflect.TypeOf((*MockUtilService)(nil).GetCorrelationIdFromContext), ctx)
}

// GetCorrelationIdFromGrpc mocks base method.
func (m *MockUtilService) GetCorrelationIdFromGrpc(ctx context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCorrelationIdFromGrpc", ctx)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetCorrelationIdFromGrpc indicates an expected call of GetCorrelationIdFromGrpc.
func (mr *MockUtilServiceMockRecorder) GetCorrelationIdFromGrpc(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCorrelationIdFromGrpc", reflect.TypeOf((*MockUtilService)(nil).GetCorrelationIdFromGrpc), ctx)
}

// InsertCorrelationIdToGrpc mocks base method.
func (m *MockUtilService) InsertCorrelationIdToGrpc(ctx context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCorrelationIdToGrpc", ctx)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// InsertCorrelationIdToGrpc indicates an expected call of InsertCorrelationIdToGrpc.
func (mr *MockUtilServiceMockRecorder) InsertCorrelationIdToGrpc(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCorrelationIdToGrpc", reflect.TypeOf((*MockUtilService)(nil).InsertCorrelationIdToGrpc), ctx)
}

// ObjectMapper mocks base method.
func (m *MockUtilService) ObjectMapper(source, destination any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectMapper", source, destination)
	ret0, _ := ret[0].(error)
	return ret0
}

// ObjectMapper indicates an expected call of ObjectMapper.
func (mr *MockUtilServiceMockRecorder) ObjectMapper(source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectMapper", reflect.TypeOf((*MockUtilService)(nil).ObjectMapper), source, destination)
}

// SetCorrelationIdFromHeader mocks base method.
func (m *MockUtilService) SetCorrelationIdFromHeader(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCorrelationIdFromHeader", ctx)
}

// SetCorrelationIdFromHeader indicates an expected call of SetCorrelationIdFromHeader.
func (mr *MockUtilServiceMockRecorder) SetCorrelationIdFromHeader(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCorrelationIdFromHeader", reflect.TypeOf((*MockUtilService)(nil).SetCorrelationIdFromHeader), ctx)
}

// UpsertCorrelationId mocks base method.
func (m *MockUtilService) UpsertCorrelationId(ctx context.Context, corrUid ...string) context.Context {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range corrUid {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertCorrelationId", varargs...)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// UpsertCorrelationId indicates an expected call of UpsertCorrelationId.
func (mr *MockUtilServiceMockRecorder) UpsertCorrelationId(ctx interface{}, corrUid ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, corrUid...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCorrelationId", reflect.TypeOf((*MockUtilService)(nil).UpsertCorrelationId), varargs...)
}

// UtilErrorResponseBuilder mocks base method.
func (m *MockUtilService) UtilErrorResponseBuilder(errResponseType model.ResponseType, data any) model.CommonErrorResponseType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UtilErrorResponseBuilder", errResponseType, data)
	ret0, _ := ret[0].(model.CommonErrorResponseType)
	return ret0
}

// UtilErrorResponseBuilder indicates an expected call of UtilErrorResponseBuilder.
func (mr *MockUtilServiceMockRecorder) UtilErrorResponseBuilder(errResponseType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UtilErrorResponseBuilder", reflect.TypeOf((*MockUtilService)(nil).UtilErrorResponseBuilder), errResponseType, data)
}

// UtilErrorResponseSwitcher mocks base method.
func (m *MockUtilService) UtilErrorResponseSwitcher(ctx *gin.Context, errResponseType model.ResponseType, data any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UtilErrorResponseSwitcher", ctx, errResponseType, data)
}

// UtilErrorResponseSwitcher indicates an expected call of UtilErrorResponseSwitcher.
func (mr *MockUtilServiceMockRecorder) UtilErrorResponseSwitcher(ctx, errResponseType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UtilErrorResponseSwitcher", reflect.TypeOf((*MockUtilService)(nil).UtilErrorResponseSwitcher), ctx, errResponseType, data)
}

// UtilResponseBuilder mocks base method.
func (m *MockUtilService) UtilResponseBuilder(responseType model.ResponseType, data any) model.CommonResponseType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UtilResponseBuilder", responseType, data)
	ret0, _ := ret[0].(model.CommonResponseType)
	return ret0
}

// UtilResponseBuilder indicates an expected call of UtilResponseBuilder.
func (mr *MockUtilServiceMockRecorder) UtilResponseBuilder(responseType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UtilResponseBuilder", reflect.TypeOf((*MockUtilService)(nil).UtilResponseBuilder), responseType, data)
}

// UtilResponseSwitcher mocks base method.
func (m *MockUtilService) UtilResponseSwitcher(ctx *gin.Context, responseType model.ResponseType, data any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UtilResponseSwitcher", ctx, responseType, data)
}

// UtilResponseSwitcher indicates an expected call of UtilResponseSwitcher.
func (mr *MockUtilServiceMockRecorder) UtilResponseSwitcher(ctx, responseType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UtilResponseSwitcher", reflect.TypeOf((*MockUtilService)(nil).UtilResponseSwitcher), ctx, responseType, data)
}
