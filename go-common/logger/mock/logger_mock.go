// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zap "go.uber.org/zap"
)

// MockCustomLogger is a mock of CustomLogger interface.
type MockCustomLogger struct {
	ctrl     *gomock.Controller
	recorder *MockCustomLoggerMockRecorder
}

// MockCustomLoggerMockRecorder is the mock recorder for MockCustomLogger.
type MockCustomLoggerMockRecorder struct {
	mock *MockCustomLogger
}

// NewMockCustomLogger creates a new mock instance.
func NewMockCustomLogger(ctrl *gomock.Controller) *MockCustomLogger {
	mock := &MockCustomLogger{ctrl: ctrl}
	mock.recorder = &MockCustomLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomLogger) EXPECT() *MockCustomLoggerMockRecorder {
	return m.recorder
}

// Logger mocks base method.
func (m *MockCustomLogger) Logger() *zap.SugaredLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(*zap.SugaredLogger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockCustomLoggerMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockCustomLogger)(nil).Logger))
}

// WithContext mocks base method.
func (m *MockCustomLogger) WithContext(ctx context.Context) *zap.SugaredLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(*zap.SugaredLogger)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockCustomLoggerMockRecorder) WithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockCustomLogger)(nil).WithContext), ctx)
}
