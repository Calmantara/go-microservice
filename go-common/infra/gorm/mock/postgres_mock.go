// Code generated by MockGen. DO NOT EDIT.
// Source: postgres.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	configgorm "github.com/Calmantara/go-common/infra/gorm"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockPostgresConfig is a mock of PostgresConfig interface.
type MockPostgresConfig struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresConfigMockRecorder
}

// MockPostgresConfigMockRecorder is the mock recorder for MockPostgresConfig.
type MockPostgresConfigMockRecorder struct {
	mock *MockPostgresConfig
}

// NewMockPostgresConfig creates a new mock instance.
func NewMockPostgresConfig(ctrl *gomock.Controller) *MockPostgresConfig {
	mock := &MockPostgresConfig{ctrl: ctrl}
	mock.recorder = &MockPostgresConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresConfig) EXPECT() *MockPostgresConfigMockRecorder {
	return m.recorder
}

// GenerateTransaction mocks base method.
func (m *MockPostgresConfig) GenerateTransaction(ctx context.Context) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTransaction", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GenerateTransaction indicates an expected call of GenerateTransaction.
func (mr *MockPostgresConfigMockRecorder) GenerateTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTransaction", reflect.TypeOf((*MockPostgresConfig)(nil).GenerateTransaction), ctx)
}

// GetClient mocks base method.
func (m *MockPostgresConfig) GetClient() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockPostgresConfigMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockPostgresConfig)(nil).GetClient))
}

// GetParam mocks base method.
func (m *MockPostgresConfig) GetParam() configgorm.PostgresParam {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParam")
	ret0, _ := ret[0].(configgorm.PostgresParam)
	return ret0
}

// GetParam indicates an expected call of GetParam.
func (mr *MockPostgresConfigMockRecorder) GetParam() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParam", reflect.TypeOf((*MockPostgresConfig)(nil).GetParam))
}
