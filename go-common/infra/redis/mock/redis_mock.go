// Code generated by MockGen. DO NOT EDIT.
// Source: redis.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	redisconfig "github.com/Calmantara/go-common/infra/redis"
	redis "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
)

// MockRedisConfig is a mock of RedisConfig interface.
type MockRedisConfig struct {
	ctrl     *gomock.Controller
	recorder *MockRedisConfigMockRecorder
}

// MockRedisConfigMockRecorder is the mock recorder for MockRedisConfig.
type MockRedisConfigMockRecorder struct {
	mock *MockRedisConfig
}

// NewMockRedisConfig creates a new mock instance.
func NewMockRedisConfig(ctrl *gomock.Controller) *MockRedisConfig {
	mock := &MockRedisConfig{ctrl: ctrl}
	mock.recorder = &MockRedisConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisConfig) EXPECT() *MockRedisConfigMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockRedisConfig) GetClient() *redis.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*redis.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockRedisConfigMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockRedisConfig)(nil).GetClient))
}

// GetParam mocks base method.
func (m *MockRedisConfig) GetParam() redisconfig.RedisParam {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParam")
	ret0, _ := ret[0].(redisconfig.RedisParam)
	return ret0
}

// GetParam indicates an expected call of GetParam.
func (mr *MockRedisConfigMockRecorder) GetParam() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParam", reflect.TypeOf((*MockRedisConfig)(nil).GetParam))
}
