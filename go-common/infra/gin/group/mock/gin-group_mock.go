// Code generated by MockGen. DO NOT EDIT.
// Source: gin-group.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockGinGroup is a mock of GinGroup interface.
type MockGinGroup struct {
	ctrl     *gomock.Controller
	recorder *MockGinGroupMockRecorder
}

// MockGinGroupMockRecorder is the mock recorder for MockGinGroup.
type MockGinGroupMockRecorder struct {
	mock *MockGinGroup
}

// NewMockGinGroup creates a new mock instance.
func NewMockGinGroup(ctrl *gomock.Controller) *MockGinGroup {
	mock := &MockGinGroup{ctrl: ctrl}
	mock.recorder = &MockGinGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGinGroup) EXPECT() *MockGinGroupMockRecorder {
	return m.recorder
}

// DELETE mocks base method.
func (m *MockGinGroup) DELETE(path string, handler ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range handler {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DELETE", varargs...)
}

// DELETE indicates an expected call of DELETE.
func (mr *MockGinGroupMockRecorder) DELETE(path interface{}, handler ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, handler...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockGinGroup)(nil).DELETE), varargs...)
}

// GET mocks base method.
func (m *MockGinGroup) GET(path string, handler ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range handler {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "GET", varargs...)
}

// GET indicates an expected call of GET.
func (mr *MockGinGroupMockRecorder) GET(path interface{}, handler ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, handler...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockGinGroup)(nil).GET), varargs...)
}

// POST mocks base method.
func (m *MockGinGroup) POST(path string, handler ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range handler {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "POST", varargs...)
}

// POST indicates an expected call of POST.
func (mr *MockGinGroupMockRecorder) POST(path interface{}, handler ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, handler...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockGinGroup)(nil).POST), varargs...)
}

// PUT mocks base method.
func (m *MockGinGroup) PUT(path string, handler ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range handler {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PUT", varargs...)
}

// PUT indicates an expected call of PUT.
func (mr *MockGinGroupMockRecorder) PUT(path interface{}, handler ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, handler...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockGinGroup)(nil).PUT), varargs...)
}
