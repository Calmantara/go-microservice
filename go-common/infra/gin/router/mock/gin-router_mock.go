// Code generated by MockGen. DO NOT EDIT.
// Source: gin-router.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gingroup "github.com/Calmantara/go-common/infra/gin/group"
	ginrouter "github.com/Calmantara/go-common/infra/gin/router"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockGinRouter is a mock of GinRouter interface.
type MockGinRouter struct {
	ctrl     *gomock.Controller
	recorder *MockGinRouterMockRecorder
}

// MockGinRouterMockRecorder is the mock recorder for MockGinRouter.
type MockGinRouterMockRecorder struct {
	mock *MockGinRouter
}

// NewMockGinRouter creates a new mock instance.
func NewMockGinRouter(ctrl *gomock.Controller) *MockGinRouter {
	mock := &MockGinRouter{ctrl: ctrl}
	mock.recorder = &MockGinRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGinRouter) EXPECT() *MockGinRouterMockRecorder {
	return m.recorder
}

// DELETE mocks base method.
func (m *MockGinRouter) DELETE(path string, handler ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range handler {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DELETE", varargs...)
}

// DELETE indicates an expected call of DELETE.
func (mr *MockGinRouterMockRecorder) DELETE(path interface{}, handler ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, handler...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockGinRouter)(nil).DELETE), varargs...)
}

// GET mocks base method.
func (m *MockGinRouter) GET(path string, handler ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range handler {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "GET", varargs...)
}

// GET indicates an expected call of GET.
func (mr *MockGinRouterMockRecorder) GET(path interface{}, handler ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, handler...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockGinRouter)(nil).GET), varargs...)
}

// GROUP mocks base method.
func (m *MockGinRouter) GROUP(groupPath string, handlers ...gin.HandlerFunc) gingroup.GinGroup {
	m.ctrl.T.Helper()
	varargs := []interface{}{groupPath}
	for _, a := range handlers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GROUP", varargs...)
	ret0, _ := ret[0].(gingroup.GinGroup)
	return ret0
}

// GROUP indicates an expected call of GROUP.
func (mr *MockGinRouterMockRecorder) GROUP(groupPath interface{}, handlers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{groupPath}, handlers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GROUP", reflect.TypeOf((*MockGinRouter)(nil).GROUP), varargs...)
}

// POST mocks base method.
func (m *MockGinRouter) POST(path string, handler ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range handler {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "POST", varargs...)
}

// POST indicates an expected call of POST.
func (mr *MockGinRouterMockRecorder) POST(path interface{}, handler ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, handler...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockGinRouter)(nil).POST), varargs...)
}

// PUT mocks base method.
func (m *MockGinRouter) PUT(path string, handler ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range handler {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PUT", varargs...)
}

// PUT indicates an expected call of PUT.
func (mr *MockGinRouterMockRecorder) PUT(path interface{}, handler ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, handler...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockGinRouter)(nil).PUT), varargs...)
}

// SERVE mocks base method.
func (m *MockGinRouter) SERVE(ops ...ginrouter.Option) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range ops {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SERVE", varargs...)
}

// SERVE indicates an expected call of SERVE.
func (mr *MockGinRouterMockRecorder) SERVE(ops ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SERVE", reflect.TypeOf((*MockGinRouter)(nil).SERVE), ops...)
}

// USE mocks base method.
func (m *MockGinRouter) USE(middleware ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range middleware {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "USE", varargs...)
}

// USE indicates an expected call of USE.
func (mr *MockGinRouterMockRecorder) USE(middleware ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "USE", reflect.TypeOf((*MockGinRouter)(nil).USE), middleware...)
}
