// Code generated by MockGen. DO NOT EDIT.
// Source: wallet.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/Calmantara/go-wallet/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockWalletRepo is a mock of WalletRepo interface.
type MockWalletRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepoMockRecorder
}

// MockWalletRepoMockRecorder is the mock recorder for MockWalletRepo.
type MockWalletRepoMockRecorder struct {
	mock *MockWalletRepo
}

// NewMockWalletRepo creates a new mock instance.
func NewMockWalletRepo(ctrl *gomock.Controller) *MockWalletRepo {
	mock := &MockWalletRepo{ctrl: ctrl}
	mock.recorder = &MockWalletRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepo) EXPECT() *MockWalletRepoMockRecorder {
	return m.recorder
}

// ReadWallet mocks base method.
func (m *MockWalletRepo) ReadWallet(ctx context.Context, wallet *entity.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWallet", ctx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadWallet indicates an expected call of ReadWallet.
func (mr *MockWalletRepoMockRecorder) ReadWallet(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWallet", reflect.TypeOf((*MockWalletRepo)(nil).ReadWallet), ctx, wallet)
}

// UpsertWallet mocks base method.
func (m *MockWalletRepo) UpsertWallet(ctx context.Context, wallet *entity.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertWallet", ctx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWallet indicates an expected call of UpsertWallet.
func (mr *MockWalletRepoMockRecorder) UpsertWallet(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWallet", reflect.TypeOf((*MockWalletRepo)(nil).UpsertWallet), ctx, wallet)
}
