// Code generated by MockGen. DO NOT EDIT.
// Source: wallet.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/Calmantara/go-common/model"
	entity "github.com/Calmantara/go-wallet/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockWalletSvc is a mock of WalletSvc interface.
type MockWalletSvc struct {
	ctrl     *gomock.Controller
	recorder *MockWalletSvcMockRecorder
}

// MockWalletSvcMockRecorder is the mock recorder for MockWalletSvc.
type MockWalletSvcMockRecorder struct {
	mock *MockWalletSvc
}

// NewMockWalletSvc creates a new mock instance.
func NewMockWalletSvc(ctrl *gomock.Controller) *MockWalletSvc {
	mock := &MockWalletSvc{ctrl: ctrl}
	mock.recorder = &MockWalletSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletSvc) EXPECT() *MockWalletSvcMockRecorder {
	return m.recorder
}

// GetWalletDetail mocks base method.
func (m *MockWalletSvc) GetWalletDetail(ctx context.Context, wallet *entity.Wallet) model.ErrorModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletDetail", ctx, wallet)
	ret0, _ := ret[0].(model.ErrorModel)
	return ret0
}

// GetWalletDetail indicates an expected call of GetWalletDetail.
func (mr *MockWalletSvcMockRecorder) GetWalletDetail(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletDetail", reflect.TypeOf((*MockWalletSvc)(nil).GetWalletDetail), ctx, wallet)
}

// UpsertWallet mocks base method.
func (m *MockWalletSvc) UpsertWallet(ctx context.Context, wallet *entity.Wallet) model.ErrorModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertWallet", ctx, wallet)
	ret0, _ := ret[0].(model.ErrorModel)
	return ret0
}

// UpsertWallet indicates an expected call of UpsertWallet.
func (mr *MockWalletSvcMockRecorder) UpsertWallet(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWallet", reflect.TypeOf((*MockWalletSvc)(nil).UpsertWallet), ctx, wallet)
}
